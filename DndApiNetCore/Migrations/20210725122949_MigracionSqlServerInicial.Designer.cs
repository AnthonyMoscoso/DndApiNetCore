// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models.Entities.EntityFW.Contexts;

namespace DndApiNetCore.Migrations
{
    [DbContext(typeof(DungeonsContext))]
    [Migration("20210725122949_MigracionSqlServerInicial")]
    partial class MigracionSqlServerInicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Entities.EF.Characters", b =>
                {
                    b.Property<int>("IdCharacter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CharacterType")
                        .HasColumnType("TinyInt");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdJob")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCharacter");

                    b.HasIndex("IdJob");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Models.Entities.EF.Job", b =>
                {
                    b.Property<int>("IdJob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTittle")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(75)");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdJob");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("Models.Entities.EF.RelationShip", b =>
                {
                    b.Property<int>("IdRelation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("getDate()");

                    b.Property<int>("IdCharacter")
                        .HasColumnType("int");

                    b.Property<int>("IdCharacter1")
                        .HasColumnType("int");

                    b.Property<int>("IdRelationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("IdRelation");

                    b.HasIndex("IdCharacter");

                    b.HasIndex("IdCharacter1");

                    b.HasIndex("IdRelationType");

                    b.ToTable("RelationShip");
                });

            modelBuilder.Entity("Models.Entities.EF.RelationShipType", b =>
                {
                    b.Property<int>("IdRelationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("RelationName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("IdRelationType");

                    b.ToTable("RelationShipType");
                });

            modelBuilder.Entity("Models.Entities.EF.Characters", b =>
                {
                    b.HasOne("Models.Entities.EF.Job", "Job")
                        .WithMany("Characters")
                        .HasForeignKey("IdJob");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Models.Entities.EF.RelationShip", b =>
                {
                    b.HasOne("Models.Entities.EF.Characters", "Character")
                        .WithMany("RelationShip")
                        .HasForeignKey("IdCharacter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.EF.Characters", "Character1")
                        .WithMany("RelationShip1")
                        .HasForeignKey("IdCharacter1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.EF.RelationShipType", "RelationType")
                        .WithMany("RelationShip")
                        .HasForeignKey("IdRelationType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Character1");

                    b.Navigation("RelationType");
                });

            modelBuilder.Entity("Models.Entities.EF.Characters", b =>
                {
                    b.Navigation("RelationShip");

                    b.Navigation("RelationShip1");
                });

            modelBuilder.Entity("Models.Entities.EF.Job", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Models.Entities.EF.RelationShipType", b =>
                {
                    b.Navigation("RelationShip");
                });
#pragma warning restore 612, 618
        }
    }
}
